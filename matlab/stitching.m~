
nslices = 20;
start_slice = 5;

source_dir = '/nas/volume1/2photon/RESDATA/20161218_CE024_highres/acquisitions/';
acquisition_dirs = dir(source_dir);
isub = [acquisition_dirs(:).isdir]; %# returns logical vector
acquisitions = {acquisition_dirs(isub).name}';
acquisitions(ismember(acquisitions,{'.','..'})) = [];

for acquisition_idx = 1:length(acquisitions)
    
    curr_acquisition_name = acquisitions{acquisition_idx};
    curr_acquisition_dir = fullfile(source_dir, curr_acquisition_name);
    
    subvolume_dirs = dir(curr_acquisition_dir);
    isub = [subvolume_dirs(:).isdir]; %# returns logical vector
    subvolumes = {subvolume_dirs(isub).name}';
    subvolumes(ismember(subvolumes,{'.','..'})) = [];
    
    for subvolume_idx=1:length(subvolumes)
        
        curr_subvolume_dir = fullfile(curr_acquisition_dir, subvolumes{subvolume_idx}, 'Corrected', 'Channel01');
        slices = dir(fullfile(curr_subvolume_dir, '*.tif'));
        slices = {slices(:).name}';
        slices = slices(start_slice:end);
        
        average_stack = zeros(d1,d2,nslices-start_slice+1);
        for slice_idx=1:length(slices)
            curr_slice_path = fullfile(curr_subvolume_dir, slices{slice_idx});
            
            [Y,~] = tiffRead(curr_slice_path);
            %[header,Aout,imgInfo] = scanimage.util.opentif(curr_slice_path);
            sframe = 1;
            %Y = bigread2(curr_slice_path,sframe);
            %if ~isa(Y,'double');    Y = double(Y)./65535;  end         % convert to single

            [d1,d2,T] = size(Y);                                % dimensions of dataset
            d = d1*d2;  
            
            average_stack(:,:,slice_idx) = mean(Y, 3);
        end
        %average_stack = uint16(round(average_stack.*65535));
        %average_stack = int16(average_stack);
        avgerage_stack_dir = fullfile(curr_acquisition_dir, 'average_stacks');
        if ~exist(avgerage_stack_dir, 'dir')
            mkdir(avgerage_stack_dir);
        end
        average_stack_fn = sprintf('avg_%s_sub%i_%i.tif', subvolumes{subvolume_idx}, start_slice, nslices);
        try
            tiffWrite(average_stack, average_stack_fn, avgerage_stack_dir);
        catch
            pause(60);
            tiffWrite(average_stack, average_stack_fn, avgerage_stack_dir) %, 'int16');
        end
            
    end


    fprintf('Processing acquisition %s...\n', curr_acquisition_name);
    % ---------------------------------------------------------------------
    % Walk through each acquisition-directory and run motion correction:
    tiff_dirs = dir(curr_acquisition_dir);
    tmp_isub = [tiff_dirs(:).isdir]; %# returns logical vector
    tiffs = {tiff_dirs(tmp_isub).name}';
    tiffs(ismember(tiffs,{'.','..'})) = [];
    for tiff_idx = 1:length(tiffs)
        curr_mov = fullfile(curr_acquisition_dir, tiffs{tiff_idx});



curr_tiff_path = fullfile(source_dir, curr_tiff_fn);


    end
    
end
cond_no = sprintf('cond%i', cond_idx);
run_no = sprintf('run%i', run_idx);

% -------------------------------------------------------------------------
% load tiff
sframe = 1;
Y = bigread2(curr_tiff_path,sframe);
if ~isa(Y,'double');    Y = double(Y);  end         % convert to single

[d1,d2,T] = size(Y);                                % dimensions of dataset
d = d1*d2;      

%%


nruns = length(t_fns); %12;

tiff_dir = strcat(source_dir, 'ch1_slice6/');
parse_dir = strcat(source_dir, 'ch1_slice6_parsed/');
if ~exist(parse_dir, 'dir')
    mkdir(parse_dir)
end

% Choose .mat struct fn:
for code=1:length(stim_types)
    
    stim_dir = char(strcat(parse_dir, stim_types(code), '/'));
    if ~exist(stim_dir, 'dir')
        mkdir(stim_dir)
    end

    
    for t_fn=1:length(t_fns)
        if isfield(trial_struct.(stim_types{code}), t_fns{t_fn})
            curr_tfn = t_fns{t_fn};
            curr_tidxs = trial_struct.(stim_types{code}).(curr_tfn){1};

            fprintf('Current run: %i\n', t_fn)
            tmp_file_no = strsplit(t_fns{run_idx}, 'file');
            run_idx = str2num(tmp_file_no{end});

            curr_tiff = sprintf('fov1_gratings_%05d.tif #2.tif #%i.tif', run_idx, slice_idx);
            curr_tiff_path = strcat(tiff_dir, curr_tiff);

            sframe=1;
            Y = bigread2(strcat(tiff_dir, curr_tiff),sframe);
            %if ~isa(Y,'double');    Y = double(Y);  end
            %
            nframes = size(Y,3);

            curr_frames = Y(:,:,curr_tidxs(1):curr_tidxs(end));
            %fprintf('%i frames - File %s - N idxs: %i\n', size(curr_frames,3), curr_tfn, length(curr_tidxs));
            if size(curr_frames,3) == use_nframes+1
                curr_frames = Y(:,:,curr_tidxs(1)+1:curr_tidxs(end));
            end
            
            parsed_tiff_fn = strcat(curr_tiff, sprintf(' %s code%i.tif', curr_tfn, code));
            try
                tiffWrite(curr_frames, parsed_tiff_fn, stim_dir);
            catch
                pause(60);
                tiffWrite(curr_frames, parsed_tiff_fn, stim_dir) %, 'int16');
            end
        else
            continue;
        end
    end

end
